/**
 * reverseplayer - Give a reverse Audio Buffer from a forward playing buffer
 * @version v1.0.0
 * @license MIT
 * "Sat May 23 2015 23:51:59 GMT+0800 (SGT)"
 */!function e(r,t,n){function f(o,u){if(!t[o]){if(!r[o]){var s="function"==typeof require&&require;if(!u&&s)return s(o,!0);if(i)return i(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var a=t[o]={exports:{}};r[o][0].call(a.exports,function(e){var t=r[o][1][e];return f(t?t:e)},a,a.exports,e,r,t,n)}return t[o].exports}for(var i="function"==typeof require&&require,o=0;o<n.length;o++)f(n[o]);return f}({1:[function(e,r,t){"use strict";function n(e){if(!(this instanceof n))throw new TypeError("ReverseBuffer constructor cannot be called as a function.");window.AudioContext=window.AudioContext||window.webkitAudioContext,window.ReverseBuffer=this,e=e||{};for(var r in e)this.hasOwnProperty(r)&&void 0!==e[r]&&(this[r]=e[r]);this.context=e.context||window.AudioContext,this._buffer=e.buffer,this.reverseBuffer=null;var t=0,f=0;if(this._buffer)for(this.reverseBuffer=this.context.createBuffer(this._buffer.numberOfChannels,this._buffer.length,this._buffer.sampleRate),t=0;t<this._buffer.numberOfChannels;t++){var i=this.reverseBuffer.getChannelData(t),o=this._buffer.getChannelData(t);for(f=0;f<this._buffer.length;f++)i[f]=o[this._buffer.length-f]}return this.reverseBuffer}r.exports=n},{}]},{},[1]);